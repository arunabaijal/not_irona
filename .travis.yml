# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and are installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#

# There are envioronment variables you may want to change, such as ROS_DISTRO,
# ROSINSTALL_FILE, and the CATKIN_OPTIONS file.  See the README.md for more
# information on these flags, and
# https://docs.travis-ci.com/user/environment-variables/ for information about
# Travis environment variables in general.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################
dist: xenial
sudo: required
cache: apt
language: generic

# Configuration variables. All variables are global
env:
  global:
    - ROS_DISTRO=kinetic
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/tiago_public.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
  - sudo apt-get update -qq
  - sudo apt-get install dpkg
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool --allow-unauthenticated
  # Add opencv support in ROS
  #- sudo apt-get install libopencv-dev
  # install lcov to generate code coverage data
  - sudo apt-get install -y lcov --allow-unauthenticated
  # Needed to install coveralls-lcov to upload coverage information generated by LCOV to coveralls.io
  - gem install coveralls-lcov 
  # Install ROS-Base: (Bare Bones) ROS package, build, and communication libraries. No GUI tools.
  - sudo apt-get install -y ros-kinetic-desktop-full --allow-unauthenticated
  - sudo apt-get install ros-$ROS_DISTRO-ros-base --allow-unauthenticated
  - sudo apt-get install ros-$ROS_DISTRO-move-base ros-$ROS_DISTRO-move-base ros-$ROS_DISTRO-std-msgs ros-$ROS_DISTRO-sensor-msgs ros-$ROS_DISTRO-geometry-msgs --allow-unauthenticated
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - sudo apt-get install ros-$ROS_DISTRO-python-qt-binding --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-urdf-geometry-parser --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-humanoid-nav-msgs --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-carrot-planner --allow-unauthenticated
  # - sudo -H ros-kinetic-control-msgs ros-kinetic-control-toolbox --allow-unauthenticated
  # - sudo -H ros-kinetic-kdl-conversions ros-kinetic-orocos-kdl --allow-unauthenticated
  # - sudo -H ros-kinetic-python-orocos-kdl ros-kinetic-realtime-tools --allow-unauthenticated
  - sudo -H apt-get install ros-kinetic-eband-local-planner --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-moveit-planners-ompl --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-teb-local-planner --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-diagnostic-updater --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-global-planner --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-urdf-test --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-fake-localization --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-pointcloud-to-laserscan --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-moveit-ros-visualization --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-moveit-ros-planning-interface --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-octomap-server --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-dwa-local-planner --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-moveit-commander --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-libuvc-camera --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-four-wheel-steering-msgs --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-joy --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-uvc-camera --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-map-server --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-twist-mux --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-sick-tim --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-moveit-ros-move-group --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-gmapping --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-range-sensor-layer --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-moveit-simple-controller-manager --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-depthimage-to-laserscan --allow-unauthenticated
  - sudo -H apt-get install -y python-pyside --allow-unauthenticated
  - sudo -H apt-get install -y libpyside-dev --allow-unauthenticated
  - sudo -H apt-get install -y libshiboken-dev --allow-unauthenticated
  - sudo -H apt-get install -y shiboken --allow-unauthenticated
  - sudo -H apt-get install -y python-qt4 --allow-unauthenticated
  - sudo -H apt-get install -y python-qt4-dev --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-amcl --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-openni2-launch --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-rqt-gui-py --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-joint-state-publisher --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-polled-camera --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-laser-filters --allow-unauthenticated
  - sudo -H apt-get install -y libgazebo7-dev --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-tf2-geometry-msgs --allow-unauthenticated
  - sudo -H apt-get install -y ros-kinetic-image-transport-plugins --allow-unauthenticated
  - sudo -H apt-get install -y gazebo7 --allow-unauthenticated
  - 
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update
  # Install 


# Create a catkin workspace with the package under integration.
install:
  # Create a catkin workspace
  - mkdir -p ~/catkin_ws/src
  - cd ~/catkin_ws/src
  - catkin_init_workspace
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - cd ~/catkin_ws
  - catkin_make
  - source devel/setup.bash
  # Add the package under integration to the workspace using a symlink.
  - cd ~/catkin_ws/src
  - ln -s $CI_SOURCE_PATH .

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  - cd ~/catkin_ws/src
  - wstool init
  - if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
  - wstool up
  # package depdencies: install using rosdep.
  - cd ~/catkin_ws
  - rosdep install -y -r --from-paths src --ignore-src --rosdistro kinetic --skip-keys="opencv2 opencv2-nonfree pal_laser_filters speed_limit_node sensor_to_cloud hokuyo_node libdw-dev python-graphitesend-pip python-statsd pal_filters pal_vo_server pal_usb_utils pal_pcl pal_pcl_points_throttle_and_filter pal_karto pal_local_joint_control camera_calibration_files pal_startup_msgs pal-orbbec-openni2 dummy_actuators_manager pal_local_planner gravity_compensation_controller current_limit_controller dynamic_footprint dynamixel_cpp tf_lookup"

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd ~/catkin_ws
  - catkin_make $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  #- catkin_make run_tests_irona && catkin_test_results
  - rostest irona launchtest.launch

after_success:
  - cd ~/catkin_ws/build
  - lcov --directory . --capture --output-file coverage.info
  - lcov --remove coverage.info '/opt/*' '/usr/*' '*/devel/*' '*test_*' '*_test*' --output-file coverage.info
  - lcov --list coverage.info
  - coveralls-lcov coverage.info
